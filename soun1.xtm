; Annoying monotone
(bind-func sine:DSP
  (lambda (in time chan dat)
    (* .1 (cos (* (convert time) .04)))))

; silence
(bind-func sine:DSP
  (lambda (in time chan dat)
    0.0))

(dsp:set! sine)

;; pattern language docs


; Setting up an audio signal chain
; Load up the audio & pattern language infrastructure:
; - three analogue synths (syn1, syn2 and syn3)
; - a synth drum kit (kit)
; - a piano sampler (samp1)
(sys:load "examples/sharedsystem/audiosetup.xtm")

; Pattern basics
(:| pat-1 2 0 (play syn1 @1 80 dur) (list 60 58 60 63))
(:| pat-1 2 0 (play syn1 @1 80 dur) (list 60 58 60 63 60 61))
;                                         C  B  C  D# C  C# ??
; :> macro, tell Extempore the rest of this expression is a pattern (start)
; :| macro, tell Extempore to stop the pattern
; pattern name: pat-1 (but any valid scheme variable name is ok)
; 2 = total length of beats in the pattern
; 0 = offset in beats of the pattern
; (play syn1 @1 80 dur) = pattern expression that gets evaluated at each triggering
; (list 60 58 60 63) = (one or more) pattern list(s) the pattern loops through
;
; (play syn1 @1 80 dur) means
; (play instrument pitch velocity duration)

; global tempo
(*metro* 'set-tempo 75)

; notes
; 60 = middle C
;

; 6/16/2020 - still doing quick start and Pattern Language
;; then, this will trigger an 8-note "ascending scale" loop starting at middle C
(:| ascending-scale 4 0 (play syn1 @1 80 dur) (scale 4 8))

; Pattern Language Basics
(:> pat-1 2 0 (play syn1 @1 80 dur) (list 60 58 60 63 60 61))
(:| pat-1 2 0 (play syn1 @1 80 dur) (list 60 58 60 63 60 61))
;                                         C  B  C  D# C  C# ??
; :> macro, tell Extempore the rest of this expression is a pattern (start)
; :| macro, tell Extempore to stop the pattern
; pattern name: pat-1 (but any valid scheme variable name is ok)
; 2 = total length of beats in the pattern
; 0 = offset in beats of the pattern
; (play syn1 @1 80 dur) = pattern expression that gets evaluated at each triggering
; (list 60 58 60 63) = (one or more) pattern list(s) the pattern loops through
;
; (play syn1 @1 80 dur) means
; (play instrument pitch velocity duration)

(:| pat-1 2 0 (play syn1 @1 80 dur) (list 60 58 60 63 60 61))
(:| pat-1 2 0 (play syn1 @1 80 dur) (list 60 58 60 62 64 66 68 66 64 62 60 58))

; two different patterns with two different loop durations
(:| pat-1 2 0 (play syn1 @1 80 dur) (list 60 58 60 63 60 61))
(:| pat-2 4 0 (play syn1 @1 80 dur) (list 67 67 67 48 36 65))

; compare modifying offset patterns

(:> pat-1 2 0 (play syn1 @1 80 dur) (list 60 58 60 63 60 61))
(:> pat-2 4 0 (play syn1 @1 80 dur) (list 67 67 67 48 36 65))
vs.
(:| pat-1 2 0 (play syn1 @1 80 dur) (list 60 58 60 63 60 61))
(:| pat-2 4 2 (play syn1 @1 80 dur) (list 67 67 67 48 36 65))

; Incorporate a rest into the pattern
(:| pat-1 2 0 (play samp1 @1 80 dur) '((60 | 58) 60 | 63 (60 | 61)))
; (:> pat-2 4 1 (play kit @1 80 dur) (list 67 '_ 67 '_ 67 '_ 63 65))
(:| pat-2 2 0 (play kit @1 30 dur) '(60 60))

; Quoting someting tells extm that it is not a variable
; the main point with quoting the _ ('_) is to tell Scheme to
; treat it like a symbol (and symbols are kind of like names)
; the ' (quote) operator can be applied to a list e.g
(:| pat-3 4 1 (play samp1 @1 90 dur) '((67 67) | 67 _ (63 65)))

; | is a tie
; _ is a rest

; sub dividing lists: '( (60 61) 62 63 (64 65))
; The final two notes are 1/2 notes
; You can also have triplets: '(48 (54 _ 46))

(:| pat-3 4 0 (play samp1 @1 80 dur) '(48 (70 80 75)))

; the lists and sublists just have to have nice round (even numbers) so lists and sublists of 7 or 15 or 115 will work.
; The side effect of this is that there are multiple ways to specify one sequence and duration
; eg, these two patterns sound the same:
(:| option-1 4 0 (play samp1 @1 80 dur) '(60 | 48 61))
(:| option-2 4 0 (play samp1 @1 80 dur) '(60 (48 61)))

; Finally, chords (e.g playing multiple notes at once)
; #(1 2 3) is a vector that plays all of the elements at once.
; since its a fout beat pattern it will play for four beats before it re-triggers
(:| chord-1 16 0 (play samp1 @1 100 dur)
  '(#(60 63 67) #(62 65 68) #(58 31 65) #(62 65 68) (58 61 65)))

; this combines different features of the pattern language together to play classic vi-IV-V pop anthems (w/ a nice suspended 4th and resolution on chord V)
(:| pop-prog 16 0 (play samp1 @1 100 dur)
  '(#(60 63 67) #(60 63 68) #(58 63 67) #(58 63 65) #(58 62 65)))

; multiple pattern lists
; for when you want to have more than one value in an expression vary over time
; the :> macro allows multiple pattern lists for this purpose

;; og example
(:| og-pat 2 0 (play samp1 @1 100 dur) '(60 58 60 63))

;This adds a second param? for loudness
(:| og-pat2 16 0 (play samp1 @1 @2 dur)
  '(#(60 63 67) #(60 63 68) #(58 62 67) #(58 63 65) #(46 60 70)) '(95 100 150 110 140))
; caveate - with multiple lists the note duration is always based on the length of the first list
; have fun 4 against 3 or 17 against 6 interactions between the list values.

(:| pat-1 6 0 (play samp1 @1 80 (* dur 0.5)) '(60 58 60 63))
; debugging variables
(:| pat-1 6 0 (println @1) '(60 58 60 63 88))

; variables that can be bound
; beat - the number the represents the number of beats (since the start of the etm sessione) goes up forever
; dur - the length of the note
; LC - a number that represents the loop count; goes up by whole number
; LL - loop length in beats
; LP - loop position in beats (resets to zero after each loop)

; alternate between two notes each time through the pattern
(:| pat-1 2 0 (play samp1 @1 100 dur) (list 60 58 60 (if (= (% LC 2) 0) 66 63)))

; orbit (orb) also does the same thing (use modulo arithmatic to decide which note to play)
(:| pat-1 2 0 (play samp1 @1 100 dur) (list 60 58 60 (orb LC 2 66 77)))
; every 4rd time
(:| pat-1 2 0 (play samp1 @1 80 dur) (list 60 58 60 (orb LC 3 66 63)))
; leaving off the 63 means orbit returns a _ (rest)
(:| pat-1 2 0 (play samp1 @1 80 dur) (list 60 58 60 (orb LC 2 66)))

; cycle through two differnt lists 60 58 60 then alternate sublists
; EXAMPLE
(:| pat-1 2 0 (play samp1 @1 100 (* dur 2)) (list 60 58 60 (cycle LC 2 '(72 67) '(55 57))))
(:| pat-2 4 0 (play samp1 @1 100 (* dur 4)) (list 56 48 56 (cycle LC 1 '(88 86) '(72 76))))

; note names
; 1st char is the note letter (pitch class) e.g a-g
; 2nd (optional) char is the accidental modifier # (sharp) b (flat)
; 3rd char is a number that represents an octave
;
; examples
; c#4 is one semitone above middle C
; a4 is the A above middle C (A440)
; bb5 is a Bb nearly 2 octaves above middle C
; c2 is a C two octaves below middle C

; EXAMPLE
(:| cello-suites 4 0 (play samp1 @1 80 dur) '(c3 e3 g3 c4 e4 g3 c4 e4))
; going further with cycle
; this cycles over two scales
(:| cello-suites 4 0 (play samp1 @1 80 (* dur 2))
  (cycle LC 2
         '(c3 e3 g3 c4 e4 g3 c4 e4)
         '(c3 d3 a3 d4 f4 a3 d4 f4)
         '(c3 d3 a3 d4 f4 a3 d4 f4)))

; with chords
(:| cello-suites 6 0 (play samp1 @1 80 (* dur 2))
  (cycle LC 2
         '(#(60 63 67) #(60 63 68) #(58 62 67) #(58 63 65) #(46 60 70))
         '(#(58 61 65) #(58 61 66) #(56 60 65) #(56 61 63) #(44 58 68))))


(:| og-pat2 16 0 (play samp1 @1 @2 dur)
  '(#(60 63 67) #(60 63 68) #(58 62 67) #(58 63 65) #(46 60 70)) '(95 100 150 110 140))

(:| og-pat3 4 1 (play samp1 @1 @2 dur)
  '(#(60 63 67) #(60 63 68) #(58 62 67) #(58 63 65) #(46 60 70)) '(95 100 150 110 140))


# Scales, roots and chords
